<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Hayley Anderson</title>
 <link href="http://blog.hayleyanderson.us/atom.xml" rel="self"/>
 <link href="http://blog.hayleyanderson.us/"/>
 <updated>2014-11-27T15:11:50-05:00</updated>
 <id>http://blog.hayleyanderson.us/</id>
 <author>
   <name>Hayley Anderson</name>
   <email>hayleyanderson@zoho.com</email>
 </author>

 
 <entry>
   <title>Formception</title>
   <link href="http://blog.hayleyanderson.us/2014/11/27/formception/"/>
   <updated>2014-11-27T00:00:00-05:00</updated>
   <id>http://blog.hayleyanderson.us/2014/11/27/formception</id>
   <content type="html">&lt;p&gt;Or how to make forms within forms to make forms within forms. The key here is the magic (yes, actual magic) of &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we recently had the opportunity to choose a group project to work on, I insisted on the &lt;a href=&quot;http://formr-orlatter.herokuapp.com&quot;&gt;Survey Monkey clone&lt;/a&gt; because I thought it would present some interesting challenges. Did I actually have any idea of how to handle those challenges? No, not really, but it was quite a fun journey.&lt;/p&gt;

&lt;p&gt;We decided pretty quickly to have separate tables and models for surveys, questions, and answers, but have only a one-page form for creating a survey complete with questions and answers. This then posed the problem of how to best create the questions and answers with a form for a survey.&lt;/p&gt;

&lt;p&gt;As it turns out, &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; is a great way to solve this problem. It must be added to each model that will be creating objects of another model within it - in this case, survey accepts nested attributes for questions and answers, and question accepts nested attributes for answers.&lt;/p&gt;

&lt;p&gt;Then the magic happens. Create the correct number of new empty questions and answers in the surveys controller, create a form for survey (just survey!), add a &lt;code&gt;fields_for :questions&lt;/code&gt;, and looped under that, a &lt;code&gt;fields_for :answers&lt;/code&gt;. The numbers of questions and answers created will be rendered by the mini-forms &lt;code&gt;fields_for&lt;/code&gt; and then given ids. Since question belongs to survey, the questions table will receive the survey id, and since answer belongs to question, the answers table will receive the question id.&lt;/p&gt;

&lt;p&gt;It gets better. Add &lt;code&gt;allow_destroy: true&lt;/code&gt;, and you can delete questions and answers directly within the survey form by including an option for &lt;code&gt;:_destroy&lt;/code&gt; in each &lt;code&gt;fields_for&lt;/code&gt;. Add &lt;code&gt;reject_if: :all_blank&lt;/code&gt;, and the object will not be created if the field is not filled out. Questions, since they may have empty answers within them, need only a slightly more detailed lambda stating to reject if the main question field is blank.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Check out this crazy model magic&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Survey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;presence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;default_scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;dependent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:destroy&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:questions&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;accepts_nested_attributes_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;allow_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reject_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;accepts_nested_attributes_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;allow_destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;reject_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:all_blank&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the models and form are set, but there&amp;#39;s still a bit more work to be done. The survey params now contain &lt;em&gt;everything&lt;/em&gt;: &lt;code&gt;:name, questions_attributes: [:content, :_destroy, answers_attributes: [:choice, :_destroy]]&lt;/code&gt;. And since the form creates ids for questions and answers, it will continue creating new ids each time you try to edit unless you specifically pull in the ids for questions and answers through the params in the surveys controller.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s the first half of your formception. Here, Rails has it all set up for you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Changeability and Design</title>
   <link href="http://blog.hayleyanderson.us/2014/11/09/changeability-and-design/"/>
   <updated>2014-11-09T00:00:00-05:00</updated>
   <id>http://blog.hayleyanderson.us/2014/11/09/changeability-and-design</id>
   <content type="html">&lt;p&gt;I always come up with ideas for posts, but then I never feel like actually writing the posts. So now I have to combine several of the topics I was intending to write about, including git and polymorphism. They do, after all, have the same themes in common. In short, they can provide, and are best used with, carefully planned design and an ability to smoothly make changes as time goes on.&lt;/p&gt;

&lt;p&gt;Git can be a rough thing to learn (see &lt;a href=&quot;http://blog.hayleyanderson.us/2014/10/03/github-and-the-magical-black-hole-of-version-control/&quot;&gt;my post&lt;/a&gt;), but now I&amp;#39;m really starting to see the beauty in it. You can make concise, sensible commits, and then later remove the ones that introduced problems without losing other work. You can make branches to designate different features, types of work, or contributors, then loop them back together and later see how you got to where you are now. But it all rests on designing your workflow and planning for the future.&lt;/p&gt;

&lt;p&gt;Code is the same. Design, plan, break it up into smaller parts, leave it flexible for future changes. One of the coolest examples of this is polymorphism. Partly just because of its awesome name. But also because it&amp;#39;s a really awesome tool. Polymorphism can prevent both repetition and conditionals, and it&amp;#39;s an important technique that can be used in designing code to be flexible.&lt;/p&gt;

&lt;p&gt;Polymorphism can be used in different ways, but in general, it allows pieces of code to run differently depending on the situation. Rather than hard-coding a method to take a particular variable, you can pass it an argument that may change - because your code is changing frequently, the variable may be different depending on the situation, or you&amp;#39;d like it to accept multiple different pieces of information. Polymorphism, by definition, makes your code changeable - in exactly the way you need it to be.&lt;/p&gt;

&lt;p&gt;The best part about this learning experience is starting to see things come together and being able to spot and appreciate the benefits of good design and planning. Programming is starting to seem more like an art, and I finally start to get why people complain about certain types of bad programming and all the git tutorials spend more time than anything warning that you&amp;#39;re going to anger other developers. Maybe I can&amp;#39;t program well, but at least I know what they&amp;#39;re talking about. Appreciating changeability and design - it&amp;#39;s a start.&lt;/p&gt;

&lt;p&gt;For more on polymorphism (via thoughtbot):&lt;br&gt;
* &lt;a href=&quot;http://robots.thoughtbot.com/back-to-basics-polymorphism-and-ruby&quot;&gt;Back to Basics: Polymorphism and Ruby&lt;/a&gt;&lt;br&gt;
* &lt;a href=&quot;http://robots.thoughtbot.com/refactoring-replace-conditional-with-polymorphism&quot;&gt;Refactoring: Replace Conditional with Polymorphism&lt;/a&gt;&lt;br&gt;
* &lt;a href=&quot;http://robots.thoughtbot.com/using-polymorphism-to-make-a-better-activity-feed-in-rails&quot;&gt;Using Polymorphism to Make a Better Activity Feed in Rails&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Strings and Arrays and Linked Lists, Oh My!</title>
   <link href="http://blog.hayleyanderson.us/2014/10/25/strings-and-arrays-and-linked-lists-oh-my/"/>
   <updated>2014-10-25T00:00:00-04:00</updated>
   <id>http://blog.hayleyanderson.us/2014/10/25/strings-and-arrays-and-linked-lists-oh-my</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve spent some time the past couple weeks learning about data structures and algorithms. I started out &lt;a href=&quot;http://code.tutsplus.com/tutorials/algorithms-and-data-structures--cms-20437&quot;&gt;here&lt;/a&gt;, reading about some of the basics of data structures. I&amp;#39;ve since been reading &lt;a href=&quot;http://interactivepython.org/runestone/static/pythonds/index.html&quot;&gt;Problem Solving with Algorithms and Data Structures&lt;/a&gt; on Interactive Python, and everything is starting to make more sense.&lt;/p&gt;

&lt;p&gt;Strings, arrays, and linked lists are a few types of data structures - objects used to store information. They&amp;#39;re used in algorithms, which are sort of like the underlying processes behind programs. Programs are created to make certain things happen, but algorithms are more general. They focus more on the details of how data is stored and manipulated. As a result, one of the main concerns with algorithms is their effectiveness in terms of speed and memory use.&lt;/p&gt;

&lt;p&gt;Speed of an algorithm is represented by Big-O (order of magnitude) notation. Big-O notation is shown as O(function of n), with n being the size of the problem - for example, if 5 items are being iterated over in the algorithm, n is 5. Since algorithms are not meant for particular situations, n is sometimes treated like the limit to infinity. This means that f(n) is often simplified so that most algorithms give just a few functions for Big-O notation.&lt;/p&gt;

&lt;p&gt;Some of the common functions are constant, O(1), logarithmic, O(log(n)), linear, O(n), log-linear, O(nlog(n)), and quadratic, O(n&lt;sup&gt;2&lt;/sup&gt;). If you look at these functions on a &lt;a href=&quot;http://interactivepython.org/runestone/static/pythonds/AlgorithmAnalysis/BigONotation.html&quot;&gt;graph&lt;/a&gt;, you can see that they&amp;#39;re in order of increasing slope. Algorithms with functions of lower slope, such as log(n), are typically preferred over algorithms with functions of higher slope, such as n&lt;sup&gt;2&lt;/sup&gt;, because they are less likely to take an unacceptable amount of time if the dataset grows very large.&lt;/p&gt;

&lt;p&gt;A constant algorithm takes the same amount of time regardless of the size of the problem - maybe the algorithm simply replaces the first item in an array without regard to the other items in the list. A linear algorithm may have a single loop that loops through a list of n items once, so as n increases, the time required linearly increases.&lt;/p&gt;

&lt;p&gt;A logarithmic algorithm may also have a loop, but the loop may break or be limited so that the amount of time required does not increase as quickly as the number of items increases. On the other hand, a quadratic algorithm could have a loop looping through each item &lt;em&gt;within&lt;/em&gt; the first loop. In this situation, the time required obviously increases very quickly as n grows very large, and it suggests that another algorithm may be preferable.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m still learning how to actually write algorithms, but last night I was able to watch a practice technical interview through &lt;a href=&quot;https://www.facebook.com/groups/LadiesStormHackathons/&quot;&gt;Ladies Storm Hackathons&lt;/a&gt;, which helped a lot in elucidating the mysterious coding interview. With some more practice, I hope to catch up with some of the computer science knowledge I&amp;#39;ve missed in time to do well in coding interviews.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Running on Rails</title>
   <link href="http://blog.hayleyanderson.us/2014/10/19/running-on-rails/"/>
   <updated>2014-10-19T00:00:00-04:00</updated>
   <id>http://blog.hayleyanderson.us/2014/10/19/running-on-rails</id>
   <content type="html">&lt;p&gt;I&amp;#39;m going to start aiming for shorter, more frequent posts. The last couple
weeks have been pretty overwhelming, as we started learning Rails. There is
basically just so much information, I don&amp;#39;t know where to start. Regardless,
Rails is great. I didn&amp;#39;t expect to like it so much. But this weekend I&amp;#39;ve been
at a hackathon where I was asked to work on a Bootstrap and a Wordpress site,
and I desperately missed the organization and structure of Rails.&lt;/p&gt;

&lt;p&gt;Rails is an MVC, or model-view-controller framework. This means that it&amp;#39;s
structured with separate sections for models, views, and controllers, and these pieces work together to determine how the application runs.&lt;/p&gt;

&lt;p&gt;Models get information from the database and determine how the database tables relate to each other. This means, for example, that if your application has users and groups, the models can relate the users table and the groups table so that users can join groups.&lt;/p&gt;

&lt;p&gt;Views are more like the actual pages of the application. There might be views
for an index page, a user page, a group page, pages with lists of all the users or groups, pages for making new users or groups, etc.&lt;/p&gt;

&lt;p&gt;Controllers connect the models and views, and fetch the information from the
model that will be required for the view. It might say that for the user view,
you need to get information about the user (from the model) before showing the
user page.&lt;/p&gt;

&lt;p&gt;In the end, when a user navigates through your application, each request they send, by clicking on a link, submitting a form, etc., will go to the routes. The routes determine which pages and actions your application will have. The routes will send the request to the corresponding section of the controller, which fetches the information it needs from the model, which connects with the database and sends back information accordingly. The controller then sends the information to the corresponding view, which renders the correct page and allow the user to continue navigating through the website and
sending requests.&lt;/p&gt;

&lt;p&gt;So that&amp;#39;s the basics of Rails. It&amp;#39;s a very cool framework, and I&amp;#39;m excited to
start working on bigger and more complex Rails applications, and writing about
some of the more interesting things that Ruby and/or Rails can do.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Github and the Magical Black Hole of Version Control</title>
   <link href="http://blog.hayleyanderson.us/2014/10/03/github-and-the-magical-black-hole-of-version-control/"/>
   <updated>2014-10-03T00:00:00-04:00</updated>
   <id>http://blog.hayleyanderson.us/2014/10/03/github-and-the-magical-black-hole-of-version-control</id>
   <content type="html">&lt;p&gt;In celebration of my first-ever (successful!) pull request, I&amp;#39;m dedicating this post to the use of git and Github. The concept of git and Github was a huge source of frustration to me early in the summer, when I painfully managed to get my website onto Github without any understanding of what I was doing. I&amp;#39;m still learning how to understand and use these tools effectively and appropriately, and I&amp;#39;m sure I will be for a very long time.&lt;/p&gt;

&lt;p&gt;Git isn&amp;#39;t something you can really see, certainly not in the way you can see the results of HTML or Ruby that you wrote, and a beginner uses git and Github differently from someone working on a team. And unlike with other concepts, there aren&amp;#39;t many resources out there that explain the basics or how to improve on your own. &lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;This tutorial&lt;/a&gt; is great for learning the commands, but I when I started, I didn&amp;#39;t understand what I was accomplishing with these commands or why.&lt;/p&gt;

&lt;p&gt;First you need to understand that git is a method of version control and tracks your changes, while Github is a website that makes git much easier to use and understand. Git runs Github, not the other way around. I think of git as a magical black hole that permanently absorbs information from files and can communicate between your computer and Github, but only if you tell it to and are responsible about doing so.&lt;/p&gt;

&lt;p&gt;You can connect files on your computer to Github by creating a folder, or &lt;a href=&quot;http://files.fosswire.com/2007/08/fwunixref.pdf&quot;&gt;directory&lt;/a&gt;, adding in the files that you want to put on Github, and sprinkling magical git &amp;#39;init&amp;#39; dust on the folder to transform it into a repository. This doesn&amp;#39;t really change the folder; it just tells git to watch the folder. You then create a repository on Github, and tell git as directed that you want to connect the repository on your computer and the respository on Github.&lt;/p&gt;

&lt;p&gt;Once your folder is a git repository, git can see the files in it, but it can&amp;#39;t do anything with them. You need to &amp;#39;add&amp;#39; those files. Now they&amp;#39;re &amp;#39;staged&amp;#39; but git still isn&amp;#39;t doing anything with them; it just has the potential. If you want git to actually save those files or the new changes in them, you need to &amp;#39;commit&amp;#39; them. The files on your computer will be unchanged, but now copies of those files, any past versions of those files that you committed, and the &amp;#39;commit&amp;#39; messages you added will permanently reside in the magical black hole of git. It&amp;#39;s only at this point that you can tell Github about these files, and if you&amp;#39;re ready, &amp;#39;push&amp;#39; them into the &amp;#39;master&amp;#39; branch of the repository on Github.&lt;/p&gt;

&lt;p&gt;If you change your documents and want the changes to appear on Github you need to &amp;#39;add&amp;#39;, &amp;#39;commit&amp;#39;, and &amp;#39;push&amp;#39;, or just &amp;#39;add&amp;#39; and &amp;#39;commit&amp;#39; if you want git to save and track your changes but you don&amp;#39;t want them to appear online yet. You might notice that you can edit files in Github and think that this will be easier, but it won&amp;#39;t be. This will likely result in conflicts, or differences between versions, which are frustrating and confusing and are not supposed to happen while you&amp;#39;re working alone. Later when you&amp;#39;re a contributing directly to a repository with other developers, you will have to carefully &amp;#39;pull&amp;#39; their changes as they add them, thereby updating what you have locally on your computer, while making and pushing your own changes. This is when conflicts typically occur.&lt;/p&gt;

&lt;p&gt;Git doesn&amp;#39;t like conflicts because its purpose is to orchestrate different people working on the same project and to encourage organized, planned changes. To git, even if you&amp;#39;re working alone, the repository on your computer and the repository on Github are still separate places. It expects that you are working only on the files on your computer and that you, like your files, are unaware of what is happening on Github until you ask git and it tells you.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested in someone else&amp;#39;s project, you can &amp;#39;fork&amp;#39; or &amp;#39;clone&amp;#39; it, downloading it to your own Github account or computer, where you can play with it as you wish. If eventually you do this to an open source project and you commit useful changes to your forked or cloned version, you can submit a &amp;#39;pull request&amp;#39; to ask those in charge of the original project to &amp;#39;pull&amp;#39; your changes into their own main version of the project, and actually use them.&lt;/p&gt;

&lt;p&gt;If you want to make a series of changes you&amp;#39;re unsure about or take your work on differing paths, you can create a new branch. Branches separate different series of changes. In practice, if you have a currently functioning project but want to change it, you will probably create and commit your new changes to a &amp;#39;development&amp;#39; branch, where the changes are completely separate from the main &amp;#39;master&amp;#39; branch that your functioning project most likely lives in. The changes in &amp;#39;development&amp;#39; will leave your master branch untouched until you &amp;#39;merge&amp;#39; the branches, adding the new changes from the new branch into the original branch.&lt;/p&gt;

&lt;p&gt;Git does far, far more than I can even begin to talk about, but I wanted to address some basic misunderstandings that I&amp;#39;ve struggled with and have seen others struggling with. There is lots of &lt;a href=&quot;https://www.atlassian.com/git/tutorials/setting-up-a-repository&quot;&gt;information&lt;/a&gt; out there, but almost all of it assumes some prior level of understanding (and that you&amp;#39;re working on a large project with others), even when explaining the basics.&lt;/p&gt;

&lt;p&gt;This has been another overly long post, but if you&amp;#39;re interested in the difficulties of beginner programmers (whether you&amp;#39;ve been one yourself or not), &lt;a href=&quot;http://christinacacioppo.com/blog/learning-online&quot;&gt;this piece&lt;/a&gt; is an incredibly interesting, non-git-related blog post that I recently read and highly recommend.&lt;/p&gt;

&lt;p&gt;P.S. Save completely separate backups before attempting anything in git that you aren&amp;#39;t confident about.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to Object-Oriented Programming</title>
   <link href="http://blog.hayleyanderson.us/2014/09/26/introduction-to-object-oriented-programming/"/>
   <updated>2014-09-26T00:00:00-04:00</updated>
   <id>http://blog.hayleyanderson.us/2014/09/26/introduction-to-object-oriented-programming</id>
   <content type="html">&lt;p&gt;Although the first week of the Metis Ruby on Rails course has been much less intense than I&amp;#39;d expected, the first week has been a somewhat jolting dive into object-oriented programming. Before the class started, the bits of Ruby I&amp;#39;d done were just lines of code. I thought classes were for CSS, methods were just words that did cool things to variables, and objects were for special uses of Python or Java.&lt;/p&gt;

&lt;p&gt;Arrays, hashes, strings, numbers, variables, and performing basic functions on them are the easy bits. I&amp;#39;ve had a lot more difficulty wrapping my head around objects and what to do with them.&lt;/p&gt;

&lt;p&gt;We jumped into using objects on Day One, when we created a simple guessing game. The computer picks a random number between one and ten, and you try to guess what it is (until you get it wrong three times). Then we added the ability to play multiple rounds, and to end the game by telling you how many times you won, as well as the depressingly-close-to-three average number of guesses per round.&lt;/p&gt;

&lt;p&gt;This game uses at least a Game class and a Round class, and muliple methods, or chunks of useful code, within each of them. There&amp;#39;s only one game, or one game object, each time you run the program, but there are multiple rounds, or multiple instances of the round object. Or more, multiple round objects. The Game class must introduce the game, run the rounds, count the total scores, and announce the scores at the end. This means that the class should contain at least a welcome method, a loop that creates and starts each round, a scoring method, and an ending method.&lt;/p&gt;

&lt;p&gt;The Round class, meanwhile, must choose a random number, ask for guesses, tally guesses to be calculated in the average, evaluate guesses, and respond. It gets to have a method for each step, and a loop that runs the guess/tally/evaluation/response pieces three times, unless the loop is broken by a correct guess. (Which then starts a new round, unless the game has already looped through the Round class five times.)&lt;/p&gt;

&lt;p&gt;After my initial dismay about cutting a program into pieces, the part I struggled with was understanding how the rounds worked as objects, and more specifically, getting the two classes to communicate on the guess count. Having the game count and total the wins on its own was simple, but the game kept counting only one guess for each round (definitely not accurate). In the end, the solution was adding a method to the Round class that simply pointed to the variable collecting the guess tally, and then, in the loop within the Game class, calling said method on each instance of the Round class.&lt;/p&gt;

&lt;p&gt;On the first day, the idea of having an object (a class) that&amp;#39;s also multiple objects (each instance), was incredibly confusing. A few days later, it makes a whole lot more sense, though I still have to fight my inclination to keep the numbers of classes and methods as small as I can get away with. It&amp;#39;s only been a week though, and I&amp;#39;ve come a pretty long way. My little &lt;a href=&quot;https://github.com/HayleyCAnderson/WeekOne/blob/master/music.rb&quot;&gt;music database solution&lt;/a&gt; has six whole methods, accurate names, and appropriate spacing that I did entirely without help or pointed suggestions!&lt;/p&gt;

&lt;p&gt;I&amp;#39;m excited to have started looking at data, and I can&amp;#39;t wait for next week, when we start working with SQL, HTTP, gems, and Sinatra. I think having a less limited view of the use of code will help, and I&amp;#39;m eager to start moving towards work that has more real-life applications. Check back next week, and I&amp;#39;ll try to improve my blog game as well as my distaste for classes.&lt;/p&gt;
</content>
 </entry>
 

</feed>
